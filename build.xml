<!--
   Copyright 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project name="SCXML" default="jar" basedir=".">


<!--
        "SCXML" component of the Jakarta Commons Subproject
        $Id$
-->


<!-- ========== Initialize Properties ===================================== -->

  <property file="${user.home}/build.properties"/>   <!-- User local        -->
  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->

<!-- ========== Component Declarations ==================================== -->

  <!-- The name of this component -->
  <property name="component.name"          value="scxml"/>

  <!-- The title of this component -->
  <property name="component.title"         value="SCXML Engine"/>

  <!-- The primary package name of this component -->
  <property name="component.package"       value="org.apache.commons.scxml"/>

  <!-- The current version number of this component -->
  <property name="component.version"       value="1.0-SNAPSHOT"/>

  <!-- The jar name of this component -->
  <property name="jar.name"
           value="commons-${component.name}-${component.version}.jar"/>

  <!-- The base directory for compilation targets -->
  <property name="build.home"              value="build"/>

  <!-- The base directory for component configuration files -->
  <property name="conf.home"               value="src/conf"/>

  <!-- The base directory for distribution targets -->
  <property name="dist.home"               value="dist"/>

  <!-- The base directory for component sources -->
  <property name="source.home"             value="src/main/java"/>

  <!-- The base directory for unit test sources -->
  <property name="test.home"               value="src/test/java"/>

  <!-- Anakia props -->
  <property name="docs.src" value="./xdocs"/>
  <property name="docs.dest" value="${dist.home}/docs"/>


<!-- ========== Compiler Defaults ========================================= -->


  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug"           value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation"     value="true"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize"        value="true"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${jsp-api.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-el.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
  </path>


<!-- ========== Test Execution Defaults =================================== -->


  <!-- Construct unit test classpath -->
  <path id="test.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${build.home}/tests"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${jsp-api.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-el.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
  </path>

  <!-- Should all tests fail if one does? -->
  <property name="test.failonerror"        value="true"/>

  <!-- The test runner to execute -->
  <property name="test.runner"             value="junit.textui.TestRunner"/>

<!-- ========== Executable Targets ======================================== -->

  <target name="checkRequiredFile">
    <available file="${file}" property="requirement.satisfied"/>
    <antcall target="property.warning">
      <param name="name" value="${name}"/>
      <param name="value" value="${file}"/>
      <param name="fail.message" value="${fail.message}"/>
    </antcall>
  </target>

  <target name="check.available">
    <antcall target="checkRequiredFile">
      <param name="name" value="commons-digester.jar"/>
      <param name="file" value="${commons-digester.jar}"/>
      <param name="fail.message" value="I could not find commons-digester.jar"/>
    </antcall>
    <antcall target="checkRequiredFile">
      <param name="name" value="commons-el.jar"/>
      <param name="file" value="${commons-el.jar}"/>
      <param name="fail.message" value="I could not find commons-el.jar"/>
    </antcall>
    <antcall target="checkRequiredFile">
      <param name="name" value="commons-logging.jar"/>
      <param name="file" value="${commons-logging.jar}"/>
      <param name="fail.message" value="I could not find commons-logging.jar"/>
    </antcall>
    <antcall target="checkRequiredFile">
      <param name="name" value="servlet.jar"/>
      <param name="file" value="${servlet.jar}"/>
      <param name="fail.message" value="I could not find servlet.jar"/>
    </antcall>
    <antcall target="checkRequiredFile">
      <param name="name" value="jsp-api.jar"/>
      <param name="file" value="${jsp-api.jar}"/>
      <param name="fail.message" value="I could not find jsp-api.jar"/>
    </antcall>
    <antcall target="checkRequiredFile">
      <param name="name" value="junit.jar"/>
      <param name="file" value="${junit.jar}"/>
      <param name="fail.message" value="I could not find junit.jar"/>
    </antcall>
  </target>

  <target name="init"
    description="Initialize and evaluate conditionals"
    depends="check.available">
    <echo message="-------- ${component.name} ${component.version} --------"/>
    <filter  token="name"                  value="${component.name}"/>
    <filter  token="package"               value="${component.package}"/>
    <filter  token="version"               value="${component.version}"/>

    <echo message="commons-digester.jar = ${commons-digester.jar}"/>
    <echo message="commons-el.jar = ${commons-el.jar}"/>
    <echo message="commons-logging.jar = ${commons-logging.jar}"/>
    <echo message="servlet.jar = ${servlet.jar}"/>
    <echo message="jsp-api.jar = ${jsp-api.jar}"/>
    <echo message="junit.jar = ${junit.jar}"/>
  </target>

  <target name="property.warning" unless="requirement.satisfied">
    <echo>
      +--------------------------------------------------+
      + F A I L E D  R E Q U I R E M E N T               |
      +--------------------------------------------------+
      | You must define the following property in order  |
      | to build ${component.name}:
      |                                                  |
      | ${name} = ${value}
      |                                                  |
      | You can set this property in the provided        |
      | build.properties file, or you may set this       |
      | property in a build.properties file in:          |
      | ${user.home}/
      +--------------------------------------------------+
    </echo>
    <fail message="${fail.message}"/>
  </target>

  <target name="prepare" depends="init"
   description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${build.home}/conf"/>
    <mkdir dir="${build.home}/tests"/>
  </target>

  <target name="static" depends="prepare"
   description="Copy static files to build directory">
    <tstamp/>
    <copy  todir="${build.home}/conf" filtering="on">
      <fileset dir="${conf.home}" includes="*.MF"/>
    </copy>
  </target>


  <target name="compile" depends="static"
   description="Compile shareable components">
    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy    todir="${build.home}/classes" filtering="on">
      <fileset dir="${source.home}" excludes="**/*.java"/>
    </copy>
  </target>


  <target name="compile.tests" depends="compile"
   description="Compile unit test cases">
    <javac  srcdir="${test.home}"
           destdir="${build.home}/tests"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="test.classpath"/>
    </javac>
    <copy    todir="${build.home}/tests" filtering="on">
      <fileset dir="${test.home}" excludes="**/*.java"/>
    </copy>
  </target>


  <target name="clean"
   description="Clean build and distribution directories">
    <delete    dir="${build.home}"/>
    <delete    dir="${dist.home}"/>
  </target>


  <target name="all" depends="clean,compile"
   description="Clean and compile all components"/>


  <target name="javadoc" depends="compile"
   description="Create component Javadoc documentation">
    <mkdir      dir="${dist.home}"/>
    <mkdir      dir="${dist.home}/docs"/>
    <mkdir      dir="${dist.home}/docs/apidocs"/>
    <javadoc sourcepath="${source.home}"
           classpathref="compile.classpath"
                destdir="${dist.home}/docs/apidocs"
           packagenames="org.apache.commons.*"
                 author="true"
                private="false"
                version="true"
               doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
            windowtitle="${component.title} (Version ${component.version})"
                 bottom="Copyright (c) 2001 - Apache Software Foundation"/>
  </target>

  <!-- ================================================================== -->
  <!-- J A R                                                              -->
  <!-- ================================================================== -->
  <target name="jar" depends="compile" description="Build jar">
    <mkdir      dir="${dist.home}"/>
    <copy      file="LICENSE.txt"
             tofile="${build.home}/classes/META-INF/LICENSE.txt"/>
    <copy      file="NOTICE.txt"
             tofile="${build.home}/classes/META-INF/NOTICE.txt"/>
    <jar    jarfile="${dist.home}/${jar.name}"
            basedir="${build.home}/classes"
           manifest="${build.home}/conf/MANIFEST.MF"/>
  </target>
  
  <!-- ================================================================== -->
  <!-- I N S T A L L  J A R                                               -->
  <!-- ================================================================== -->

  <target name="install-jar" depends="jar" 
          description="==> Installs .jar file in ${lib.repo}">
    <copy todir="${lib.repo}" filtering="no">
      <fileset dir="${dist.home}">
        <include name="${jar.name}"/>
      </fileset>
    </copy>
  </target>

  <!-- ================================================================== -->
  <!-- D I S T                                                            -->
  <!-- ================================================================== -->

  <target name="dist" depends="compile,jar,javadoc"
   description="Create binary distribution">
    <mkdir      dir="${dist.home}"/>
    <copy      file="LICENSE.txt"
              todir="${dist.home}"/>
    <copy      file="NOTICE.txt"
              todir="${dist.home}"/>
  </target>

<!-- ========== Unit Test Targets ========================================= -->

  <!-- TODO
  <target name="test"  depends="compile.tests,
                                test.scxml"
   description="Run all unit test cases">
  </target>

  <target name="test.scxml">
    <echo message="Running SCXML tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="org.apache.commons.scxml.SCXMLTest"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>
  -->
</project>
